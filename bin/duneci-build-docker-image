#! /bin/bash

set -e
set -u

usage() {
  echo "usage: $0 [docker-options]... <image-name> <directories>..." >&2
  exit 0
}

docker-build() {
  docker build ${docker_opts[@]:+"${docker_opts[@]}"} "${@}"
}


gitlab_server=$(sed 's|^\(https\?\)://[^@]\+@\([^/]\+\)/.*$|\1://\2|' <<<"${CI_REPOSITORY_URL}")

get_bearer_token() {
  token=$(curl -s --user "gitlab-ci-token:${CI_JOB_TOKEN}" "${gitlab_server}/jwt/auth?client_id=docker&offline_token=true&service=container_registry&scope=repository:$1:pull")
  token=$(sed 's/.*:"\(.*\)"}/\1/' <<<"${token}")
}

get_manifest() {
  local image
  image=${1#*/}
  get_bearer_token ${image}
  manifest_data=$(curl -fs -D manifest_headers -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -H "Authorization: Bearer ${token}" "https://${CI_REGISTRY}/v2/${image}/manifests/$2")

  if [[ $? -ne 0 ]] ; then
    echo "Could not get manifest for '$1:$2'"
    return 1
  fi
  manifest_digest=$(grep "^Docker-Content-Digest:" < manifest_headers | cut -d " " -f 2)
  manifest_digest=${manifest_digest%$'\r'}
  rm -f manifest_headers
}

docker_opts=()
for var in ftp_proxy http_proxy https_proxy no_proxy; do
  if [[ -n "${!var:-}" ]]; then
    docker_opts+=(--build-arg="${var}=${!var}")
  fi
done

if [[ "${DUNECI_DOCKER_CACHE:-1}" = 0 ]]; then
  docker_opts+=(--no-cache)
fi

if [[ $# -lt 2 ]]; then
  usage
fi

parallel=

while :; do
  case "${1}" in
    --parallel)
      parallel=1
      shift
      ;;
    -*)
      docker_opts+=("${1}")
      shift
      ;;
    *)
      break
      ;;
  esac
done

image="${1}"; shift

# mangle tag for test
untagged_image=${image%:*}
tag=${image#*:}
temp_tag="temp-${tag}-${CI_PIPELINE_ID}"
temp_image="${untagged_image}:${temp_tag}"

if [[ -n "${parallel}" && -v DUNECI_PARALLEL ]]; then
  docker_opts+=(--build-arg=DUNECI_PARALLEL="${DUNECI_PARALLEL}")
fi

builddir="build/${image##*/}"
if [[ -e ${builddir} ]]; then
  echo "E: ${builddir} already exists" >&2
  exit 1
fi

mkdir -p -- "${builddir}"

for d in "$@"; do
  cp -t "${builddir}" -- "${d}"/*
done

docker-build -t "${image}" "${builddir}"

rm -rf -- "${builddir}"
